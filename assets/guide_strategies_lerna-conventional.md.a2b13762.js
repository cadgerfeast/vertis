import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.a7175731.js";const d=JSON.parse('{"title":"Lerna Conventional","description":"","frontmatter":{},"headers":[],"relativePath":"guide/strategies/lerna-conventional.md","filePath":"guide/strategies/lerna-conventional.md"}'),l={name:"guide/strategies/lerna-conventional.md"},e=o(`<h1 id="lerna-conventional" tabindex="-1">Lerna Conventional <a class="header-anchor" href="#lerna-conventional" aria-label="Permalink to &quot;Lerna Conventional&quot;">​</a></h1><p>This strategy is the default use if no <code>Vertis</code> configuration as been found.</p><p>It supports the <a href="https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional#type-enum" target="_blank" rel="noreferrer">conventional commit types</a> and produces a cool Changelog.</p><p>If your monorepo project is using <code>independent</code> versioning, the changelog will also have a <code>Releases</code> section for each or you package, and each release will be grouped by date.</p><p>Here&#39;s an example of <a href="https://github.com/cadgerfeast/vertis/blob/master/CHANGELOG.md" target="_blank" rel="noreferrer">unique CHANGELOG</a> and <a href="https://github.com/cadgerfeast/slithe/blob/main/CHANGELOG.md" target="_blank" rel="noreferrer">independent CHANGELOG</a>.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.1.2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// Either fixed or independent</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;conventionalCommits&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;chore: release&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// Feel free to change this, but &quot;filterReleaseCommit&quot; should be updated accordingly</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;tagVersionPrefix&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vertis@&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// Even if only one package is published, you should enforce package prefix, if multiple are, you can leave it undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;changelog&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// Do not generate changelog, Vertis will ;)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;push&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Do not push git tags, you&#39;ll do after changelog is generated</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0.1.2&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// Either fixed or independent</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;command&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;conventionalCommits&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;chore: release&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// Feel free to change this, but &quot;filterReleaseCommit&quot; should be updated accordingly</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;tagVersionPrefix&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vertis@&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// Even if only one package is published, you should enforce package prefix, if multiple are, you can leave it undefined</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;changelog&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// Do not generate changelog, Vertis will ;)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;push&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Do not push git tags, you&#39;ll do after changelog is generated</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vertis&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { lernaConventional } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vertis/strategy&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	strategy: </span><span style="color:#B392F0;">lernaConventional</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">filterPackage</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">pkg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pkg.private, </span><span style="color:#6A737D;">// Private package are ignored by default</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">filterReleaseCommit</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">commit</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> commit.message </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;chore: release&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// This is default behavior, please update if your release commit is different</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">computePackageReleases</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">tags</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">pkgs</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]), </span><span style="color:#6A737D;">// By default, packages are found if tag follow this format: &lt;package-name&gt;@&lt;package-version&gt;, but you can customize</span></span>
<span class="line"><span style="color:#E1E4E8;">		releaseTarget: </span><span style="color:#9ECBFF;">&#39;github&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// By default, release command will publish to github</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vertis&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { lernaConventional } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vertis/strategy&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	strategy: </span><span style="color:#6F42C1;">lernaConventional</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">filterPackage</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">pkg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pkg.private, </span><span style="color:#6A737D;">// Private package are ignored by default</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">filterReleaseCommit</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">commit</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> commit.message </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;chore: release&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// This is default behavior, please update if your release commit is different</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">computePackageReleases</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">tags</span><span style="color:#24292E;">, </span><span style="color:#E36209;">pkgs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]), </span><span style="color:#6A737D;">// By default, packages are found if tag follow this format: &lt;package-name&gt;@&lt;package-version&gt;, but you can customize</span></span>
<span class="line"><span style="color:#24292E;">		releaseTarget: </span><span style="color:#032F62;">&#39;github&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// By default, release command will publish to github</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,8),p=[e];function t(r,c,i,E,y,u){return a(),n("div",null,p)}const f=s(l,[["render",t]]);export{d as __pageData,f as default};
